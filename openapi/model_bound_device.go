/*
Cloudflare WARP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 536
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the BoundDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BoundDevice{}

// BoundDevice struct for BoundDevice
type BoundDevice struct {
	Activated string `json:"activated"`
	Active bool `json:"active"`
	Created string `json:"created"`
	Id string `json:"id"`
	Model string `json:"model"`
	Name *string `json:"name,omitempty"`
	Role string `json:"role"`
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _BoundDevice BoundDevice

// NewBoundDevice instantiates a new BoundDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoundDevice(activated string, active bool, created string, id string, model string, role string, type_ string) *BoundDevice {
	this := BoundDevice{}
	this.Activated = activated
	this.Active = active
	this.Created = created
	this.Id = id
	this.Model = model
	this.Role = role
	this.Type = type_
	return &this
}

// NewBoundDeviceWithDefaults instantiates a new BoundDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoundDeviceWithDefaults() *BoundDevice {
	this := BoundDevice{}
	return &this
}

// GetActivated returns the Activated field value
func (o *BoundDevice) GetActivated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value
// and a boolean to check if the value has been set.
func (o *BoundDevice) GetActivatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activated, true
}

// SetActivated sets field value
func (o *BoundDevice) SetActivated(v string) {
	o.Activated = v
}

// GetActive returns the Active field value
func (o *BoundDevice) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *BoundDevice) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *BoundDevice) SetActive(v bool) {
	o.Active = v
}

// GetCreated returns the Created field value
func (o *BoundDevice) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *BoundDevice) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *BoundDevice) SetCreated(v string) {
	o.Created = v
}

// GetId returns the Id field value
func (o *BoundDevice) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BoundDevice) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BoundDevice) SetId(v string) {
	o.Id = v
}

// GetModel returns the Model field value
func (o *BoundDevice) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *BoundDevice) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *BoundDevice) SetModel(v string) {
	o.Model = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BoundDevice) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoundDevice) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BoundDevice) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BoundDevice) SetName(v string) {
	o.Name = &v
}

// GetRole returns the Role field value
func (o *BoundDevice) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *BoundDevice) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *BoundDevice) SetRole(v string) {
	o.Role = v
}

// GetType returns the Type field value
func (o *BoundDevice) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BoundDevice) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BoundDevice) SetType(v string) {
	o.Type = v
}

func (o BoundDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BoundDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activated"] = o.Activated
	toSerialize["active"] = o.Active
	toSerialize["created"] = o.Created
	toSerialize["id"] = o.Id
	toSerialize["model"] = o.Model
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["role"] = o.Role
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BoundDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activated",
		"active",
		"created",
		"id",
		"model",
		"role",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBoundDevice := _BoundDevice{}

	err = json.Unmarshal(data, &varBoundDevice)

	if err != nil {
		return err
	}

	*o = BoundDevice(varBoundDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "activated")
		delete(additionalProperties, "active")
		delete(additionalProperties, "created")
		delete(additionalProperties, "id")
		delete(additionalProperties, "model")
		delete(additionalProperties, "name")
		delete(additionalProperties, "role")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBoundDevice struct {
	value *BoundDevice
	isSet bool
}

func (v NullableBoundDevice) Get() *BoundDevice {
	return v.value
}

func (v *NullableBoundDevice) Set(val *BoundDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableBoundDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableBoundDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoundDevice(val *BoundDevice) *NullableBoundDevice {
	return &NullableBoundDevice{value: val, isSet: true}
}

func (v NullableBoundDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoundDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


