/*
untitled API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 536
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GetSourceDevice200ResponseConfigInterfaceAddresses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSourceDevice200ResponseConfigInterfaceAddresses{}

// GetSourceDevice200ResponseConfigInterfaceAddresses struct for GetSourceDevice200ResponseConfigInterfaceAddresses
type GetSourceDevice200ResponseConfigInterfaceAddresses struct {
	V4 string `json:"v4"`
	V6 string `json:"v6"`
	AdditionalProperties map[string]interface{}
}

type _GetSourceDevice200ResponseConfigInterfaceAddresses GetSourceDevice200ResponseConfigInterfaceAddresses

// NewGetSourceDevice200ResponseConfigInterfaceAddresses instantiates a new GetSourceDevice200ResponseConfigInterfaceAddresses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSourceDevice200ResponseConfigInterfaceAddresses(v4 string, v6 string) *GetSourceDevice200ResponseConfigInterfaceAddresses {
	this := GetSourceDevice200ResponseConfigInterfaceAddresses{}
	this.V4 = v4
	this.V6 = v6
	return &this
}

// NewGetSourceDevice200ResponseConfigInterfaceAddressesWithDefaults instantiates a new GetSourceDevice200ResponseConfigInterfaceAddresses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSourceDevice200ResponseConfigInterfaceAddressesWithDefaults() *GetSourceDevice200ResponseConfigInterfaceAddresses {
	this := GetSourceDevice200ResponseConfigInterfaceAddresses{}
	return &this
}

// GetV4 returns the V4 field value
func (o *GetSourceDevice200ResponseConfigInterfaceAddresses) GetV4() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.V4
}

// GetV4Ok returns a tuple with the V4 field value
// and a boolean to check if the value has been set.
func (o *GetSourceDevice200ResponseConfigInterfaceAddresses) GetV4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.V4, true
}

// SetV4 sets field value
func (o *GetSourceDevice200ResponseConfigInterfaceAddresses) SetV4(v string) {
	o.V4 = v
}

// GetV6 returns the V6 field value
func (o *GetSourceDevice200ResponseConfigInterfaceAddresses) GetV6() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.V6
}

// GetV6Ok returns a tuple with the V6 field value
// and a boolean to check if the value has been set.
func (o *GetSourceDevice200ResponseConfigInterfaceAddresses) GetV6Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.V6, true
}

// SetV6 sets field value
func (o *GetSourceDevice200ResponseConfigInterfaceAddresses) SetV6(v string) {
	o.V6 = v
}

func (o GetSourceDevice200ResponseConfigInterfaceAddresses) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSourceDevice200ResponseConfigInterfaceAddresses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["v4"] = o.V4
	toSerialize["v6"] = o.V6

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetSourceDevice200ResponseConfigInterfaceAddresses) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"v4",
		"v6",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetSourceDevice200ResponseConfigInterfaceAddresses := _GetSourceDevice200ResponseConfigInterfaceAddresses{}

	err = json.Unmarshal(data, &varGetSourceDevice200ResponseConfigInterfaceAddresses)

	if err != nil {
		return err
	}

	*o = GetSourceDevice200ResponseConfigInterfaceAddresses(varGetSourceDevice200ResponseConfigInterfaceAddresses)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "v4")
		delete(additionalProperties, "v6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetSourceDevice200ResponseConfigInterfaceAddresses struct {
	value *GetSourceDevice200ResponseConfigInterfaceAddresses
	isSet bool
}

func (v NullableGetSourceDevice200ResponseConfigInterfaceAddresses) Get() *GetSourceDevice200ResponseConfigInterfaceAddresses {
	return v.value
}

func (v *NullableGetSourceDevice200ResponseConfigInterfaceAddresses) Set(val *GetSourceDevice200ResponseConfigInterfaceAddresses) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSourceDevice200ResponseConfigInterfaceAddresses) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSourceDevice200ResponseConfigInterfaceAddresses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSourceDevice200ResponseConfigInterfaceAddresses(val *GetSourceDevice200ResponseConfigInterfaceAddresses) *NullableGetSourceDevice200ResponseConfigInterfaceAddresses {
	return &NullableGetSourceDevice200ResponseConfigInterfaceAddresses{value: val, isSet: true}
}

func (v NullableGetSourceDevice200ResponseConfigInterfaceAddresses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSourceDevice200ResponseConfigInterfaceAddresses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


