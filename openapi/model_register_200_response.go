/*
Cloudflare WARP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 536
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Register200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Register200Response{}

// Register200Response struct for Register200Response
type Register200Response struct {
	Created string `json:"created"`
	Enabled bool `json:"enabled"`
	FcmToken string `json:"fcm_token"`
	Id string `json:"id"`
	InstallId string `json:"install_id"`
	Key string `json:"key"`
	Locale string `json:"locale"`
	Model string `json:"model"`
	Name string `json:"name"`
	Place float32 `json:"place"`
	Tos string `json:"tos"`
	Type string `json:"type"`
	Updated string `json:"updated"`
	WaitlistEnabled bool `json:"waitlist_enabled"`
	WarpEnabled bool `json:"warp_enabled"`
	Account Account `json:"account"`
	Config Config `json:"config"`
	Token string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _Register200Response Register200Response

// NewRegister200Response instantiates a new Register200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegister200Response(created string, enabled bool, fcmToken string, id string, installId string, key string, locale string, model string, name string, place float32, tos string, type_ string, updated string, waitlistEnabled bool, warpEnabled bool, account Account, config Config, token string) *Register200Response {
	this := Register200Response{}
	this.Created = created
	this.Enabled = enabled
	this.FcmToken = fcmToken
	this.Id = id
	this.InstallId = installId
	this.Key = key
	this.Locale = locale
	this.Model = model
	this.Name = name
	this.Place = place
	this.Tos = tos
	this.Type = type_
	this.Updated = updated
	this.WaitlistEnabled = waitlistEnabled
	this.WarpEnabled = warpEnabled
	this.Account = account
	this.Config = config
	this.Token = token
	return &this
}

// NewRegister200ResponseWithDefaults instantiates a new Register200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegister200ResponseWithDefaults() *Register200Response {
	this := Register200Response{}
	return &this
}

// GetCreated returns the Created field value
func (o *Register200Response) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Register200Response) SetCreated(v string) {
	o.Created = v
}

// GetEnabled returns the Enabled field value
func (o *Register200Response) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Register200Response) SetEnabled(v bool) {
	o.Enabled = v
}

// GetFcmToken returns the FcmToken field value
func (o *Register200Response) GetFcmToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FcmToken
}

// GetFcmTokenOk returns a tuple with the FcmToken field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetFcmTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FcmToken, true
}

// SetFcmToken sets field value
func (o *Register200Response) SetFcmToken(v string) {
	o.FcmToken = v
}

// GetId returns the Id field value
func (o *Register200Response) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Register200Response) SetId(v string) {
	o.Id = v
}

// GetInstallId returns the InstallId field value
func (o *Register200Response) GetInstallId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstallId
}

// GetInstallIdOk returns a tuple with the InstallId field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetInstallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstallId, true
}

// SetInstallId sets field value
func (o *Register200Response) SetInstallId(v string) {
	o.InstallId = v
}

// GetKey returns the Key field value
func (o *Register200Response) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *Register200Response) SetKey(v string) {
	o.Key = v
}

// GetLocale returns the Locale field value
func (o *Register200Response) GetLocale() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *Register200Response) SetLocale(v string) {
	o.Locale = v
}

// GetModel returns the Model field value
func (o *Register200Response) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *Register200Response) SetModel(v string) {
	o.Model = v
}

// GetName returns the Name field value
func (o *Register200Response) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Register200Response) SetName(v string) {
	o.Name = v
}

// GetPlace returns the Place field value
func (o *Register200Response) GetPlace() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Place
}

// GetPlaceOk returns a tuple with the Place field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetPlaceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Place, true
}

// SetPlace sets field value
func (o *Register200Response) SetPlace(v float32) {
	o.Place = v
}

// GetTos returns the Tos field value
func (o *Register200Response) GetTos() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tos
}

// GetTosOk returns a tuple with the Tos field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetTosOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tos, true
}

// SetTos sets field value
func (o *Register200Response) SetTos(v string) {
	o.Tos = v
}

// GetType returns the Type field value
func (o *Register200Response) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Register200Response) SetType(v string) {
	o.Type = v
}

// GetUpdated returns the Updated field value
func (o *Register200Response) GetUpdated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetUpdatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *Register200Response) SetUpdated(v string) {
	o.Updated = v
}

// GetWaitlistEnabled returns the WaitlistEnabled field value
func (o *Register200Response) GetWaitlistEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WaitlistEnabled
}

// GetWaitlistEnabledOk returns a tuple with the WaitlistEnabled field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetWaitlistEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WaitlistEnabled, true
}

// SetWaitlistEnabled sets field value
func (o *Register200Response) SetWaitlistEnabled(v bool) {
	o.WaitlistEnabled = v
}

// GetWarpEnabled returns the WarpEnabled field value
func (o *Register200Response) GetWarpEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WarpEnabled
}

// GetWarpEnabledOk returns a tuple with the WarpEnabled field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetWarpEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WarpEnabled, true
}

// SetWarpEnabled sets field value
func (o *Register200Response) SetWarpEnabled(v bool) {
	o.WarpEnabled = v
}

// GetAccount returns the Account field value
func (o *Register200Response) GetAccount() Account {
	if o == nil {
		var ret Account
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetAccountOk() (*Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *Register200Response) SetAccount(v Account) {
	o.Account = v
}

// GetConfig returns the Config field value
func (o *Register200Response) GetConfig() Config {
	if o == nil {
		var ret Config
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetConfigOk() (*Config, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Register200Response) SetConfig(v Config) {
	o.Config = v
}

// GetToken returns the Token field value
func (o *Register200Response) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *Register200Response) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *Register200Response) SetToken(v string) {
	o.Token = v
}

func (o Register200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Register200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	toSerialize["enabled"] = o.Enabled
	toSerialize["fcm_token"] = o.FcmToken
	toSerialize["id"] = o.Id
	toSerialize["install_id"] = o.InstallId
	toSerialize["key"] = o.Key
	toSerialize["locale"] = o.Locale
	toSerialize["model"] = o.Model
	toSerialize["name"] = o.Name
	toSerialize["place"] = o.Place
	toSerialize["tos"] = o.Tos
	toSerialize["type"] = o.Type
	toSerialize["updated"] = o.Updated
	toSerialize["waitlist_enabled"] = o.WaitlistEnabled
	toSerialize["warp_enabled"] = o.WarpEnabled
	toSerialize["account"] = o.Account
	toSerialize["config"] = o.Config
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Register200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"enabled",
		"fcm_token",
		"id",
		"install_id",
		"key",
		"locale",
		"model",
		"name",
		"place",
		"tos",
		"type",
		"updated",
		"waitlist_enabled",
		"warp_enabled",
		"account",
		"config",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegister200Response := _Register200Response{}

	err = json.Unmarshal(data, &varRegister200Response)

	if err != nil {
		return err
	}

	*o = Register200Response(varRegister200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "fcm_token")
		delete(additionalProperties, "id")
		delete(additionalProperties, "install_id")
		delete(additionalProperties, "key")
		delete(additionalProperties, "locale")
		delete(additionalProperties, "model")
		delete(additionalProperties, "name")
		delete(additionalProperties, "place")
		delete(additionalProperties, "tos")
		delete(additionalProperties, "type")
		delete(additionalProperties, "updated")
		delete(additionalProperties, "waitlist_enabled")
		delete(additionalProperties, "warp_enabled")
		delete(additionalProperties, "account")
		delete(additionalProperties, "config")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRegister200Response struct {
	value *Register200Response
	isSet bool
}

func (v NullableRegister200Response) Get() *Register200Response {
	return v.value
}

func (v *NullableRegister200Response) Set(val *Register200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRegister200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRegister200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegister200Response(val *Register200Response) *NullableRegister200Response {
	return &NullableRegister200Response{value: val, isSet: true}
}

func (v NullableRegister200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegister200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


