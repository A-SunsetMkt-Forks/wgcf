/*
Cloudflare WARP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 536
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the IPv4Network type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPv4Network{}

// IPv4Network struct for IPv4Network
type IPv4Network struct {
	Address string `json:"address"`
	Netmask string `json:"netmask"`
	AdditionalProperties map[string]interface{}
}

type _IPv4Network IPv4Network

// NewIPv4Network instantiates a new IPv4Network object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPv4Network(address string, netmask string) *IPv4Network {
	this := IPv4Network{}
	this.Address = address
	this.Netmask = netmask
	return &this
}

// NewIPv4NetworkWithDefaults instantiates a new IPv4Network object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPv4NetworkWithDefaults() *IPv4Network {
	this := IPv4Network{}
	return &this
}

// GetAddress returns the Address field value
func (o *IPv4Network) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *IPv4Network) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *IPv4Network) SetAddress(v string) {
	o.Address = v
}

// GetNetmask returns the Netmask field value
func (o *IPv4Network) GetNetmask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value
// and a boolean to check if the value has been set.
func (o *IPv4Network) GetNetmaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netmask, true
}

// SetNetmask sets field value
func (o *IPv4Network) SetNetmask(v string) {
	o.Netmask = v
}

func (o IPv4Network) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPv4Network) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["netmask"] = o.Netmask

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IPv4Network) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"netmask",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIPv4Network := _IPv4Network{}

	err = json.Unmarshal(data, &varIPv4Network)

	if err != nil {
		return err
	}

	*o = IPv4Network(varIPv4Network)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "netmask")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIPv4Network struct {
	value *IPv4Network
	isSet bool
}

func (v NullableIPv4Network) Get() *IPv4Network {
	return v.value
}

func (v *NullableIPv4Network) Set(val *IPv4Network) {
	v.value = val
	v.isSet = true
}

func (v NullableIPv4Network) IsSet() bool {
	return v.isSet
}

func (v *NullableIPv4Network) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPv4Network(val *IPv4Network) *NullableIPv4Network {
	return &NullableIPv4Network{value: val, isSet: true}
}

func (v NullableIPv4Network) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPv4Network) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


