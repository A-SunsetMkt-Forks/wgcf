/*
Cloudflare WARP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 536
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ResetAccountLicense200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResetAccountLicense200Response{}

// ResetAccountLicense200Response struct for ResetAccountLicense200Response
type ResetAccountLicense200Response struct {
	License string `json:"license"`
	AdditionalProperties map[string]interface{}
}

type _ResetAccountLicense200Response ResetAccountLicense200Response

// NewResetAccountLicense200Response instantiates a new ResetAccountLicense200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResetAccountLicense200Response(license string) *ResetAccountLicense200Response {
	this := ResetAccountLicense200Response{}
	this.License = license
	return &this
}

// NewResetAccountLicense200ResponseWithDefaults instantiates a new ResetAccountLicense200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResetAccountLicense200ResponseWithDefaults() *ResetAccountLicense200Response {
	this := ResetAccountLicense200Response{}
	return &this
}

// GetLicense returns the License field value
func (o *ResetAccountLicense200Response) GetLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *ResetAccountLicense200Response) GetLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *ResetAccountLicense200Response) SetLicense(v string) {
	o.License = v
}

func (o ResetAccountLicense200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResetAccountLicense200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["license"] = o.License

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResetAccountLicense200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"license",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResetAccountLicense200Response := _ResetAccountLicense200Response{}

	err = json.Unmarshal(data, &varResetAccountLicense200Response)

	if err != nil {
		return err
	}

	*o = ResetAccountLicense200Response(varResetAccountLicense200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "license")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResetAccountLicense200Response struct {
	value *ResetAccountLicense200Response
	isSet bool
}

func (v NullableResetAccountLicense200Response) Get() *ResetAccountLicense200Response {
	return v.value
}

func (v *NullableResetAccountLicense200Response) Set(val *ResetAccountLicense200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableResetAccountLicense200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableResetAccountLicense200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetAccountLicense200Response(val *ResetAccountLicense200Response) *NullableResetAccountLicense200Response {
	return &NullableResetAccountLicense200Response{value: val, isSet: true}
}

func (v NullableResetAccountLicense200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetAccountLicense200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


