/*
Cloudflare WARP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 536
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ConfigInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigInterface{}

// ConfigInterface struct for ConfigInterface
type ConfigInterface struct {
	Addresses NetworkAddress `json:"addresses"`
	AdditionalProperties map[string]interface{}
}

type _ConfigInterface ConfigInterface

// NewConfigInterface instantiates a new ConfigInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigInterface(addresses NetworkAddress) *ConfigInterface {
	this := ConfigInterface{}
	this.Addresses = addresses
	return &this
}

// NewConfigInterfaceWithDefaults instantiates a new ConfigInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigInterfaceWithDefaults() *ConfigInterface {
	this := ConfigInterface{}
	return &this
}

// GetAddresses returns the Addresses field value
func (o *ConfigInterface) GetAddresses() NetworkAddress {
	if o == nil {
		var ret NetworkAddress
		return ret
	}

	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value
// and a boolean to check if the value has been set.
func (o *ConfigInterface) GetAddressesOk() (*NetworkAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Addresses, true
}

// SetAddresses sets field value
func (o *ConfigInterface) SetAddresses(v NetworkAddress) {
	o.Addresses = v
}

func (o ConfigInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addresses"] = o.Addresses

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfigInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addresses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigInterface := _ConfigInterface{}

	err = json.Unmarshal(data, &varConfigInterface)

	if err != nil {
		return err
	}

	*o = ConfigInterface(varConfigInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "addresses")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfigInterface struct {
	value *ConfigInterface
	isSet bool
}

func (v NullableConfigInterface) Get() *ConfigInterface {
	return v.value
}

func (v *NullableConfigInterface) Set(val *ConfigInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigInterface(val *ConfigInterface) *NullableConfigInterface {
	return &NullableConfigInterface{value: val, isSet: true}
}

func (v NullableConfigInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


