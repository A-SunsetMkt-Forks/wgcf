/*
Cloudflare WARP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 536
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateBoundDeviceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateBoundDeviceRequest{}

// UpdateBoundDeviceRequest struct for UpdateBoundDeviceRequest
type UpdateBoundDeviceRequest struct {
	Active *bool `json:"active,omitempty"`
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateBoundDeviceRequest UpdateBoundDeviceRequest

// NewUpdateBoundDeviceRequest instantiates a new UpdateBoundDeviceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateBoundDeviceRequest() *UpdateBoundDeviceRequest {
	this := UpdateBoundDeviceRequest{}
	return &this
}

// NewUpdateBoundDeviceRequestWithDefaults instantiates a new UpdateBoundDeviceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateBoundDeviceRequestWithDefaults() *UpdateBoundDeviceRequest {
	this := UpdateBoundDeviceRequest{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UpdateBoundDeviceRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBoundDeviceRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *UpdateBoundDeviceRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *UpdateBoundDeviceRequest) SetActive(v bool) {
	o.Active = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateBoundDeviceRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBoundDeviceRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateBoundDeviceRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateBoundDeviceRequest) SetName(v string) {
	o.Name = &v
}

func (o UpdateBoundDeviceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateBoundDeviceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateBoundDeviceRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateBoundDeviceRequest := _UpdateBoundDeviceRequest{}

	err = json.Unmarshal(data, &varUpdateBoundDeviceRequest)

	if err != nil {
		return err
	}

	*o = UpdateBoundDeviceRequest(varUpdateBoundDeviceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "active")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateBoundDeviceRequest struct {
	value *UpdateBoundDeviceRequest
	isSet bool
}

func (v NullableUpdateBoundDeviceRequest) Get() *UpdateBoundDeviceRequest {
	return v.value
}

func (v *NullableUpdateBoundDeviceRequest) Set(val *UpdateBoundDeviceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateBoundDeviceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateBoundDeviceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateBoundDeviceRequest(val *UpdateBoundDeviceRequest) *NullableUpdateBoundDeviceRequest {
	return &NullableUpdateBoundDeviceRequest{value: val, isSet: true}
}

func (v NullableUpdateBoundDeviceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateBoundDeviceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


